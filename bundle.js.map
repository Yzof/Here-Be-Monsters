{"version":3,"sources":["webpack:///webpack/bootstrap d040178207e952f8821c","webpack:///./app.js","webpack:///./canvas_visuals/canvas.js","webpack:///./canvas_visuals/columns.js","webpack:///./canvas_visuals/hexs/hex.js","webpack:///./biome/biome.js","webpack:///./monster/monster.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA,OAAO,MAAM;AACb,OAAO,UAAU;;AAEjB;;;AAGA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrJA;AAAA,OAAO,UAAU;AACjB,OAAO,MAAM;AACb,OAAO,QAAQ;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;;AAEA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,6BAA6B;AAChD;AACA,iDAAiD,MAAM;;AAEvD;AACA,gCAAgC,SAAS;AACzC;AACA,qCAAqC,OAAO;AAC5C,uCAAuC,SAAS;AAChD,uCAAuC,SAAS;AAChD,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,iDAAiD,MAAM;;AAEvD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;;;;ACxJA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEQ;;;;;;;;ACrUR;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d040178207e952f8821c","const { Map } = require('./canvas_visuals/canvas.js');\nconst { Monster } = require('./monster/monster.js');\n\nlet HBMap = new Map;\n\n\nfunction start() {\n  // Initializes the client with the API key and the Translate API.\n  gapi.client.init({\n    'apiKey': 'AIzaSyC3H_vpeG4Vcp2VEx-UjqAIW96US0Ddono',\n    'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n  }).then(function() {\n    gapi.client.sheets.spreadsheets.values.batchGet({\n      spreadsheetId: '10i952_UlOAfVAIBbAVskHEIXqR3miTTdRbQE6xElqzg',\n      ranges: [\n        //Forest\n        'A2:N2', //Awakened Shrub\n        'A170:N170', //Gnoll\n        'A47:N47', //Kobold\n        'A126:N126', //Sprite\n        'A169:N169', //Giant Wasp\n        'A193:N193', //Satyr\n        //Desert\n        'A173:N173', //Hobgoblin\n        'A161:N161', //Dust Mephit\n        'A175:N175', //Jackalwere\n        'A197:N197', //Swarm of Insects\n        'A275:N275', //Thri-Kreen\n        'A599:N599', //Greater Basilisk\n        //Mountain\n        'A185:N185', //Orc\n        'A139:N139', //Winged Kobold\n        'A358:N358', //Ogre\n        'A248:N248', //Harpy\n        'A442:N442', //HellHound\n        'A494:N494', //Ash Drake\n        //Volcano\n        'A959:N959', //Red Dragon\n      ],\n      includeGridData: true\n    }).then(function(response) {\n      var range = response.result;\n      if (range.valueRanges.length > 0) {\n        //Create Monsters add them to biome\n        for (var i = 0; i < range.valueRanges.length; i++) {\n          let data = range.valueRanges[i];\n          let row = extractNum(data.range);\n\n          let monster = new Monster(data.values[0], row);\n          HBMap.biomes[monster.biome].addMonster(monster);\n        }\n      } else {\n        console.log(\"No Data Found.\");\n      }\n    });\n  });\n}\n\n        // // Get the button that opens the modal\n        // var btn = document.getElementById(\"myBtn\");\n\nfunction extractNum(string) {\n  let array = string.split(\"N\");\n  return parseInt(array[array.length - 1]);\n}\n\n// Get the modal\nvar modal = document.getElementById('myModal');\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n// Get the button that opens the modal\nvar aboutBtn = document.getElementById(\"aboutBtn\");\naboutBtn.addEventListener(\"click\", aboutHandle);\nfunction aboutHandle(e) {\n  e.preventDefault();\n  let modalHeader = document.getElementById(\"modal-header\");\n  let head = document.getElementById(\"header\");\n  let para1 = document.createElement(\"p\");\n  let node = document.createTextNode(\"About\");\n\n  modal.style.display = \"block\";\n  modalHeader.style.backgroundColor = '#7ea6e0';\n  para1.appendChild(node);\n  head.appendChild(para1);\n\n  let main = document.getElementsByClassName('modal-body')[0];\n  let para2 = document.createElement(\"p\");\n  para2.id = \"detail-body\";\n  let text = document.createTextNode(\n    \"Here Be Monsters is a visual representation of data points stored in a spreadsheet. It uses Googles Sheets API and HTML canvas to create an interactive map. Given any spreadsheet, a similar system can be implemented in order to create a pleasing display for users. You can visit the original spreadsheet here: \"\n  );\n  let anchor = document.createElement(\"a\");\n  anchor.href = \"https://goo.gl/mV8Dq8\";\n  anchor.innerText = \"Monsters\";\n  para2.appendChild(text);\n  para2.appendChild(anchor);\n  main.appendChild(para2);\n}\n\nvar helpBtn = document.getElementById(\"helpBtn\");\nhelpBtn.addEventListener(\"click\", helpHandle);\n\nfunction helpHandle(e) {\n  e.preventDefault();\n  let modalHeader = document.getElementById(\"modal-header\");\n  let head = document.getElementById(\"header\");\n  let para1 = document.createElement(\"p\");\n  let node = document.createTextNode(\"Help\");\n\n  modal.style.display = \"block\";\n  modalHeader.style.backgroundColor = '#7ea6e0';\n  para1.appendChild(node);\n  head.appendChild(para1);\n\n  let main = document.getElementsByClassName('modal-body')[0];\n  let para2 = document.createElement(\"p\");\n  para2.id = \"detail-body\";\n  let text = document.createTextNode(\n    \"Each of the Hexagrams on the map below represent a Biome, each containing a unique assortment of dangerous monsters. The selection is a semi-randomized list of those monsters and their associated data. Feel free to explore and see what you find!\"\n  );\n  para2.appendChild(text);\n  main.appendChild(para2);\n}\n\nspan.onclick = function() {\n    modal.style.display = \"none\";\n    let head = document.getElementById(\"header\");\n    let node = head.firstElementChild;\n    let main = document.getElementsByClassName('modal-body')[0];\n    let node2 = document.getElementById(\"detail-body\");\n\n    head.removeChild(node);\n    main.removeChild(node2);\n};\n\nwindow.onclick = function(event) {\n    if (event.target == modal) {\n        modal.style.display = \"none\";\n        let head = document.getElementById(\"header\");\n        let node = head.firstElementChild;\n        let main = document.getElementsByClassName('modal-body')[0];\n        let node2 = document.getElementById(\"detail-body\");\n        //remove child\n        head.removeChild(node);\n        main.removeChild(node2);\n    }\n};\n// Loads the JavaScript client library and invokes `start` afterwards.\ngapi.load('client', start);\nHBMap.render();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app.js\n// module id = 0\n// module chunks = 0","const { columns } = require('./columns.js');\nconst { Hex } = require('./hexs/hex.js');\nconst { Biome } = require('../biome/biome.js');\n\nexport class Map {\n  constructor(){\n    this.canvas = document.querySelector(\"canvas\");\n    this.ctx = this.canvas.getContext('2d');\n    this.startX = 300;\n    this.startY = 100;\n    this.columns = columns;\n    this.hexs = {};\n    this.keys = [];\n    this.biomes = {};\n    this.clickHandler = this.clickHandler.bind(this);\n    this.resetDetails = this.resetDetails.bind(this);\n\n    this.populate();\n  }\n\n  populate() {\n    for (var i = 0; i < this.columns.length; i++) {\n      let column = this.columns[i];\n\n      for (var j = 0; j < column.length; j++) {\n        let biome = new Biome(column[j].biome);\n        if (this.biomes[biome.biome] === undefined) {\n          this.biomes[biome.biome] = biome;\n        }\n\n        let hex = new Hex(column[j], this.ctx, [this.startX, this.startY]);\n        let pos = hex.posX + \",\" + hex.posY;\n        this.hexs[pos] = hex;\n      }\n    }\n  }\n\n  clickHandler(e) {\n    e.preventDefault();\n    if (e) {\n      //Finds the x,y of mouse\n      let mouseX = e.offsetX;\n      let mouseY = e.offsetY;\n      let target = null;\n      let smallest = null;\n      for (var i = 0; i < this.keys.length; i++) {\n        // extracts the x and y of all the hexs\n        let points = this.keys[i].split(\",\");\n        let hexX = parseInt(points[0]);\n        let hexY = parseInt(points[1]);\n\n        //Math\n        let a = mouseX - hexX;\n        let b = mouseY - hexY;\n        let c = Math.sqrt( a*a + b*b );\n\n        //Finds smallest line\n        if ((smallest === null || c < smallest) && c < 65) {\n          smallest = c;\n          target = points.join(\",\");\n        }\n      }\n\n      //If hex exists render it's details\n      let hex = this.hexs[target];\n      if (hex) {\n        //hex is correct, the biomes aren't being added.\n        let detes = this.biomes[hex.biome].details();\n        this.addDetails(detes);\n        // Get the modal\n        var modal = document.getElementById('myModal');\n\n        // Get the <span> element that closes the modal\n        var span = document.getElementsByClassName(\"close\")[0];\n\n        // When the user clicks the button, open the modal\n          modal.style.display = \"block\";\n\n        // When the user clicks on <span> (x), close the modal\n        span.onclick = function() {\n            modal.style.display = \"none\";\n            this.resetDetails();\n        }.bind(this);\n\n        // When the user clicks anywhere outside of the modal, close it\n        window.onclick = function(event) {\n            if (event.target == modal) {\n                modal.style.display = \"none\";\n                this.resetDetails();\n            }\n        }.bind(this);\n      }\n    }\n  }\n\n  addDetails(details) {\n    let modalHeader = document.getElementById(\"modal-header\");\n    let head = document.getElementById(\"header\");\n    let para = document.createElement(\"p\");\n    let node = document.createTextNode(details.name);\n\n    //Creates Header text\n    para.appendChild(node);\n    head.appendChild(para);\n    modalHeader.style.backgroundColor = details.color;\n\n    for (var j = 0; j < details.monsters.length; j++) {\n      let mon = details.monsters[j];\n      let li = document.getElementById(`monster${j + 1}`);\n\n      li.innerHTML = `\n      <p class=\"monster-name\">${mon.name}</p>\n      <ul class=\"monster-details\">\n        <li class=\"monster-li\">XP: ${mon.xp}<li>\n        <li class=\"monster-li\">Size: ${mon.size}<li>\n        <li class=\"monster-li\">Type: ${mon.type}<li>\n        <li class=\"monster-li\">Description: ${mon.description}<li>\n      </ul>\n      `;\n    }\n  }\n\n  resetDetails() {\n    var head = document.getElementById(\"header\");\n    let div = document.getElementsByClassName(\"modal-body\")[0];\n    let ul = div.firstElementChild;\n    let para = head.firstElementChild;\n    let main = document.getElementsByClassName('modal-body')[0];\n    let node2 = document.getElementById(\"detail-body\");\n    head.removeChild(para);\n    if (node2) {\n      main.removeChild(node2);\n    }\n    for (var j = 0; j < 3; j++) {\n      let li = document.getElementById(`monster${j + 1}`);\n\n      li.innerHTML = ``;\n    }\n  }\n\n  render(){\n    this.ctx.fillStyle = '#7ea6e0';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.canvas.addEventListener(\"click\", this.clickHandler);\n\n    this.keys = Object.keys(this.hexs);\n    for (var i = 0; i < this.keys.length; i++) {\n      let hex = this.hexs[this.keys[i]];\n      hex.render();\n    }\n  }\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./canvas_visuals/canvas.js\n// module id = 1\n// module chunks = 0","/*\nDifferent render locations\ndownshift col:[0, 130, 260, 390, 520]\nlet biomes = [\"Mountain\", \"Desert\", \"Forest\", \"Volcano\", \"ocean\"];\ninfo is an object containing:\n{\n  color: hex code\n  biome: string\n  parity: string(odd or even)\n  column: number\n  row: vertical offset\n}\n*/\nconst BIOMES = {\n  \"ocean\": {\n    color: '#7ea6e0',\n    biome: \"ocean\"\n  },\n  \"forest\": {\n    color: \"#97d077\",\n    biome: \"Forest\"\n  },\n  \"desert\": {\n    color: \"#fff2cc\",\n    biome: \"Desert\"\n  },\n  \"mountain\": {\n    color: \"#a18160\",\n    biome: \"Mountain\"\n  },\n  \"volcano\": {\n    color: \"#ff3333\",\n    biome: \"Volcano\"\n  }\n};\n\nlet columns = [\n  [ //col 0\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 0,\n      row: 130\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 0,\n      row: 260\n    },\n  ],\n  [ //col 1\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 1,\n      row: 130\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 1,\n      row: 260\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"odd\",\n      column: 1,\n      row: 390\n    },\n  ],\n  [ //col 2\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 2,\n      row: 130\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 2,\n      row: 260\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 2,\n      row: 390\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 2,\n      row: 520\n    }\n  ],\n  [ //col 3\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 3,\n      row: 130\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 3,\n      row: 260\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 3,\n      row: 390\n    },\n  ],\n  [ //col 4\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 4,\n      row: 260\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"even\",\n      column: 4,\n      row: 390\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 4,\n      row: 520\n    },\n  ],\n  [ //col 5\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"odd\",\n      column: 5,\n      row: 0\n    },\n    {\n      color: BIOMES.ocean.color, //ocean\n      biome: \"ocean\",\n      parity: \"odd\",\n      column: 5,\n      row: 130\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 5,\n      row: 260\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 5,\n      row: 390\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 5,\n      row: 520\n    },\n  ],\n  [ //col 6\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 6,\n      row: 0\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 6,\n      row: 130\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 6,\n      row: 260\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"even\",\n      column: 6,\n      row: 390\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"even\",\n      column: 6,\n      row: 520\n    },\n  ],\n  [ //col 7\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 7,\n      row: 0\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 7,\n      row: 130\n    },\n    {\n      color: BIOMES.ocean.color, //ocean\n      biome: \"ocean\",\n      parity: \"odd\",\n      column: 7,\n      row: 260\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"Forest\",\n      parity: \"odd\",\n      column: 7,\n      row: 390\n    },\n    {\n      color: BIOMES.forest.color,\n      biome: \"forest\",\n      parity: \"odd\",\n      column: 7,\n      row: 520\n    },\n  ],\n  [ //col 8\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"even\",\n      column: 8,\n      row: 0\n    },\n    {\n      color: BIOMES.volcano.color,\n      biome: \"Volcano\",\n      parity: \"even\",\n      column: 8,\n      row: 130\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"even\",\n      column: 8,\n      row: 260\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 8,\n      row: 390\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"even\",\n      column: 8,\n      row: 520\n    },\n  ],\n  [ //col 9\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 9,\n      row: 0\n    },\n    {\n      color: BIOMES.mountain.color,\n      biome: \"Mountain\",\n      parity: \"odd\",\n      column: 9,\n      row: 130\n    },\n    {\n      color: BIOMES.desert.color,\n      biome: \"Desert\",\n      parity: \"odd\",\n      column: 9,\n      row: 260\n    },\n  ],\n];\n\nexport { columns };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./canvas_visuals/columns.js\n// module id = 2\n// module chunks = 0","/*\ninfo is an object containing:\n{\n  color: hex code\n  biome: string\n  parity: string(odd or even)\n  column: number\n  row: vertical offset\n}\n*/\n\nexport class Hex {\n  constructor(info, canvas, startArr) {\n    this.color = info.color;\n    this.biome = info.biome;\n    this.size = 75;\n    this.side = 0;\n    this.canvas = canvas;\n\n    //these become the center\n    this.posX = 0;\n    this.posY = 0;\n\n    //we want to set a fixed x and y coord, do the math up here.\n    this.position(info, startArr);\n  }\n\n  position(info, startArr) {\n    this.posX = startArr[0] + (112.5 * info.column);\n    if (info.parity === \"odd\") {\n      //we want the 65 offset\n      this.posY = startArr[1] + 65 + info.row;\n    } else {\n      this.posY = startArr[1] + info.row;\n    }\n  }\n  \n  render() {\n    this.canvas.beginPath();\n    this.canvas.moveTo(\n      this.posX + this.size * Math.cos(0),\n      this.posY + this.size * Math.sin(0)\n    );\n\n    for (this.side; this.side < 7; this.side++) {\n      this.canvas.lineTo(\n        this.posX + this.size * Math.cos(this.side * 2 * Math.PI / 6),\n        this.posY + this.size * Math.sin(this.side * 2 * Math.PI / 6)\n      );\n      if (this.biome === \"ocean\" && (this.side === 3)) {\n        this.canvas.stroke();\n      }\n    }\n    this.canvas.strokeStyle=\"#000\";\n    this.canvas.fillStyle = this.color;\n    if (this.biome != \"ocean\") {\n      this.canvas.stroke();\n    }\n    this.canvas.fill();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./canvas_visuals/hexs/hex.js\n// module id = 3\n// module chunks = 0","export class Biome {\n  constructor(type) {\n    let area = \"\";\n    let code = \"\";\n    switch (type) {\n      case \"Forest\":\n        area = \"Forest\";\n        code = \"#97d077\";\n        break;\n      case \"Mountain\":\n        area = \"Mountain\";\n        code = \"#a18160\";\n        break;\n      case \"Desert\":\n        area = \"Desert\";\n        code = \"#fff2cc\";\n        break;\n      case \"Volcano\":\n        area = \"Volcano\";\n        code = \"#ff3333\";\n        break;\n    }\n    this.biome = area;\n    this.color = code;\n    this.monsters = [];\n    this.addMonster = this.addMonster.bind(this);\n    this.details = this.details.bind(this);\n  }\n\n  addMonster(monster) {\n    this.monsters.push(monster);\n  }\n\n  getRandomSubarray(arr, size) {\n      var shuffled = arr.slice(0), i = arr.length, temp, index;\n      while (i--) {\n          index = Math.floor((i + 1) * Math.random());\n          temp = shuffled[index];\n          shuffled[index] = shuffled[i];\n          shuffled[i] = temp;\n      }\n      return shuffled.slice(0, size);\n  }\n\n  details() {\n    //Create selected array from list of monsters\n    //return that so it can be displayed in a list\n    let selected = this.getRandomSubarray(this.monsters, 3);\n\n    return {\n      name: this.biome,\n      color: this.color,\n      monsters: selected\n    };\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./biome/biome.js\n// module id = 4\n// module chunks = 0","export class Monster {\n  constructor(dataArr, id) {\n    //Data passed in as an array from google api response\n    this.name = dataArr[0];\n    this.size = dataArr[2];\n    this.type = dataArr[3];\n    this.biome = dataArr[6];\n    this.level = dataArr[7];\n    this.xp = dataArr[8];\n    this.description = dataArr[13];\n    this.id = id; //Row in the spreadsheet\n\n    this.details = this.details.bind(this);\n  }\n\n  details() {\n    return {\n      id: this.id,\n      name: this.name,\n      size: this.size,\n      type: this.type,\n      biomes: this.biome,\n      level: this.level,\n      xp: this.xp,\n      description: this.description\n    };\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./monster/monster.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}